[[language]]
name = "haskell"
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
auto-format = true

[language-server.haskell-language-server] # hls config docs: https://haskell-language-server.readthedocs.io/en/latest/configuration.html#example-with-settings
config.haskell.formattingProvider = "ormolu" # default is "ormolu"
# config.haskell.checkParents = "NeverCheck" # default is "OnSave"

[[language]]
name = "nix"
formatter = { command = "nixpkgs-fmt" }

[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.texlab.config.texlab.build]
onSave = true

[[language]]
name = "python"
language-servers = ["pyright", "ruff"]

[language-server.pyright.config.python.analysis]
typeCheckingMode = "standard" # off | basic | standard | strict

[language-server.ruff]
command = "ruff-lsp"

[language-server.ruff.config.settings]
args = ["--ignore", "E501"]

[language.formatter]
command = "black"
args = ["--line-length", "88", "--quiet", "-"]

[[language]]
name = "javascript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = ["js", "jsx", "mjs"]
shebangs = ["deno", "node"]
roots = ["deno.json", "package.json", "tsconfig.json"]
# comment-token = "//"
# config = { enable = true, lint = true, unstable = true, importMap = "deno.json" }
# language-servers = ["deno", "typescript-language-server"]
language-servers = ["typescript-language-server"]
# indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
scope = "source.jsx"
injection-regex = "jsx"
file-types = ["jsx"]
shebangs = ["deno", "node"]
roots = ["deno.json", "package.json", "tsconfig.json"]
# language-servers = ["deno", "typescript-language-server", "tailwindcss-ls"]
language-servers = ["typescript-language-server", "tailwindcss-ls"]
indent = { tab-width = 2, unit = "  " }
grammar = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = ["ts"]
shebangs = ["deno", "node"]
roots = ["deno.json", "package.json", "tsconfig.json"]
# language-servers = ["deno", "typescript-language-server"]
language-servers = ["typescript-language-server"]
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
scope = "source.tsx"
injection-regex = "^(tsx)$"                               # |typescript
file-types = ["tsx"]
shebangs = ["deno", "node"]
roots = ["deno.json", "package.json", "tsconfig.json"]
# language-servers = ["deno", "typescript-language-server", "tailwindcss-ls" ]
language-servers = ["typescript-language-server", "tailwindcss-ls" ]
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[language-server.deno]
command = "deno"
args = ["lsp"]
environment = { NO_COLOR = "1" }
config = { enable = true, lint = true, unstable = true, importMap = "deno.json" }
suggest = { completeFunctionCalls = true, imports = { hosts = { "https://deno.land" = true } } }

# [language-server.deno-lsp.config.deno]
# enable = true
# Uncomment to enable completion of unstable features of Deno
# unstable = true
# Uncomment to cache dependencies on save
# cacheOnSave = true
# Enable completion of function calls
# suggest = { completeFunctionCalls = false, imports = { hosts = { "https://deno.land" = true } } }
# Enable completion of importing from registries
# suggest = { imports = { hosts = { "https://deno.land" = true, "https://crux.land" = true, "https://x.nest.land" = true } } }
# Uncomment to enable inlay hints
# inlayHints.parameterNames.enabled = "all"
# inlayHints.parameterTypes.enabled = true
# inlayHints.variableTypes.enabled = true
# inlayHints.propertyDeclarationTypes.enabled  = true
# inlayHints.functionLikeReturnTypes.enabled = true
# inlayHints.enumMemberValues.enabled = true

[language-server]
jdtls = { command = "jdtls" }
language-server = { command = "jdtls", args = [
  "-data", "/home/<USER>/.cache/jdtls/workspace"
  ]}

[[language]]
name = "java"
scope = "source.java"
injection-regex = "java"
file-types = ["java"]
roots = ["pom.xml", "build.gradle", ]
indent = { tab-width = 4, unit = "    " }
language-servers = [ "jdtls" ]

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "svelte"
language-servers = [ "svelteserver", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "svelte"] }
